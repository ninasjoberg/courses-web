import Head from "next/head";
import { useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";
import c from "../styles.module.css";
import Header from "../components/Header";
import { removeEmptyObjectValues } from "../utils/handleObject";

export default function Home({ courses }) {
  const [filteredCourses, setFilteredCourses] = useState(courses);
  const [location, setLocation] = useState("");
  const [category, setCategory] = useState("");
  const [deliveryMethods, setDeliveryMethods] = useState("");

  const searchParams = useSearchParams();
  const locationParam = searchParams.get("location") || "";
  const categoryParam = searchParams.get("category") || "";
  const deliveryMethodsParam = searchParams.get("deliveryMethods") || "";

  const disableSearch = !location && !category && !deliveryMethods;

  useEffect(() => {
    setLocation(locationParam);
    setCategory(categoryParam);
    setDeliveryMethods(deliveryMethodsParam);
  }, [locationParam, categoryParam, deliveryMethodsParam]);

  const allLocations = courses.map((course) => {
    return course.location;
  });
  const uniqueLocations = [...new Set(allLocations)];

  const allCategories = courses.map((course) => {
    return course.category;
  });
  const uniqueCategories = [...new Set(allCategories)];

  const alldeliveryMethods = courses.map((course) => {
    return course.deliveryMethod;
  });
  const uniqueDeliveryMethods = [...new Set(alldeliveryMethods)];

  const handleSearch = async () => {
    const selectedSearch = removeEmptyObjectValues(search);
    const searchParams = new URLSearchParams(selectedSearch);
    const queryString = searchParams.toString();

    const response = await fetch(
      `http://localhost:8000/courses/search?${queryString}`
    );
    const data = await response.json();

    setFilteredCourses(data);
  };

  const saveSearch = async () => {
    fetch(`http://localhost:8000/courses/savedsearches`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ userSearchParams: search }),
    });
  };

  const saveCourse = async (courseId) => {
    fetch(`http://localhost:8000/courses/savedcourses`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ courseId }),
    });
  };

  return (
    <>
      <Head>
        <title>Courses</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <Header />
        <main className={c.mainWrapper}>
          <h1>Courses</h1>
          <div className={c.selectWrapper}>
            <label for="location">
              Choose location:
              <select
                name="location"
                value={location}
                onChange={(e) => setLocation(e.target.value)}
                aria-label="Select location"
              >
                <option selected disabled value="">
                  Location
                </option>
                {uniqueLocations.map((location, index) => {
                  return <option key={index}>{location}</option>;
                })}
              </select>
            </label>
          </div>
          <div className={c.selectWrapper}>
            <label for="category">
              Choose category:
              <select
                name="category"
                aria-label="Select category"
                value={category}
                onChange={(e) => setCategory(e.target.value)}
              >
                <option selected disabled value="">
                  Category
                </option>
                {uniqueCategories.map((category, index) => {
                  return <option key={index}>{category}</option>;
                })}
              </select>
            </label>
          </div>
          <div className={c.selectWrapper}>
            <label for="deliveryMethods">
              Choose deliveryMethods:
              <select
                name="deliveryMethods"
                aria-label="Select deliveryMethods"
                value={deliveryMethods}
                onChange={(e) => setDeliveryMethods(e.target.value)}
              >
                <option selected disabled value="">
                  DeliveryMethods
                </option>
                {uniqueDeliveryMethods.map((deliveryMethods, index) => {
                  return <option key={index}>{deliveryMethods}</option>;
                })}
              </select>
            </label>
          </div>
          <button onClick={handleSearch} disabled={disableSearch}>
            Search
          </button>
          <button onClick={saveSearch} disabled={disableSearch}>
            Save search
          </button>
          {filteredCourses.length > 0 ? (
            filteredCourses.map((course) => (
              <div key={course.id} className={c.courseWrapper}>
                <h2>{course.institute}</h2>
                <button onClick={() => saveCourse(course.courseId)}>
                  Save course
                </button>
                <p>
                  <strong>course:</strong> {course.course}
                </p>
                <p>
                  <strong>deliveryMethod:</strong> {course.deliveryMethod}
                </p>
                <p>
                  <strong>location:</strong> {course.location}
                </p>
                <p>
                  <strong>language:</strong>{" "}
                  {course.language ? course.language : "not specified"}
                </p>
              </div>
            ))
          ) : (
            <p>No courses found</p>
          )}
        </main>
      </div>
    </>
  );
}

export async function getStaticProps() {
  const res = await fetch("http://localhost:8000/courses");
  const courses = await res.json();
  return { props: { courses } };
}
